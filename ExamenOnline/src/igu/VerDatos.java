package igu;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import logica.Controladora;
import logica.Examen;

public class VerDatos extends javax.swing.JFrame {

    Controladora control = null;
    
    public VerDatos() {
        control = new Controladora(); // Crear instancia a la controladora lógica.
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ScrTablaExamenes = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Tus exámenes.");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ScrTablaExamenes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(ScrTablaExamenes);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Son:");

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setText("Eliminar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnEditar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addComponent(jLabel1)))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Método creado por el evento:Abrir ventana.
        cargarTabla(); // Al abrir la ventana debe aparecer con la info de los exámenes.
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Crear método eliminar examen partiendo del ID del registro a eliminar.
        // getRowCount() retorna el num de filas existentes en la tabla.
        if ( ScrTablaExamenes.getRowCount() > 0 ) {
            //getSelectedRow retorna la fila seleccionada por el user. Si es != -1
            // significa que no hay nada seleccionado.
            if (ScrTablaExamenes.getSelectedRow()!=-1){
                //Obtener Id previa transformación de string (Vs las tablas trabajan solo con str)
                //Obtener Id del examen a eliminar.
                int vid_examen = Integer.parseInt(String.valueOf(ScrTablaExamenes.getValueAt(ScrTablaExamenes.getSelectedRow(), 0)));
                // Llamar al método borrar.
                control.borrarExamen(vid_examen);
                // Mostrar msg mensaje por pantalla.
                control.mostrarAviso ("Se borró correctamente", "Borrado con éxito", "Info" );
                cargarTabla();
            }else {
                control.mostrarAviso ("No se ha seleccionado examen a eliminar", "Error al eliminar", "Error");
            }
        }else {
            control.mostrarAviso ("Sin líneas para eliminar", "Error al eliminar", "Error");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
          // Edición del registro seleccionado.
          //Ver si la tabla contiene datos.
          if ( ScrTablaExamenes.getRowCount() > 0 ) { 
            //Ver si el usr ha seleccionado una fila 
            if (ScrTablaExamenes.getSelectedRow()!=-1){
                //Con el Id_Examen ir a Bdd a por dicho registro.
                int vid_examen = Integer.parseInt(String.valueOf(ScrTablaExamenes.getValueAt(ScrTablaExamenes.getSelectedRow(), 0)));
                //Abrir pantalla "ModificarIdentificación"
                ModificarIdentificacion pantallaModif = new ModificarIdentificacion(vid_examen);
                pantallaModif.setVisible(true);
                pantallaModif.setLocationRelativeTo(null);
                this.dispose(); //Cerrar ventana activa
                //Informar campos de la pantalla abierta.
                cargarTabla();
            }else {
                control.mostrarAviso ("No se ha seleccionado examen a eliminar", "Error al eliminar", "Error");
            }
        }else {
            control.mostrarAviso ("Sin líneas para eliminar", "Error al eliminar", "Error");
        }
        
    }//GEN-LAST:event_btnEditarActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ScrTablaExamenes;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        // Paso 1.- Definir las columnas (modelo) de la tabla.
        // Usamos CLASE especial k permite definicr el modelo.
        DefaultTableModel modeloTabla = new DefaultTableModel (){
            //Bloqueamos pantalla para no permitir introducir datos.
            @Override
            public boolean isCellEditable (int row, int column){
                return false;
            }
        };
        
        //Definir columnas de la tabla.
        String titulos[]={"Id_Examen", "Año", "Cuatrimestre", "Descripción", "Nota", "Curso", "Email", "Observaciones", "1ª subida a examen" };
        modeloTabla.setColumnIdentifiers(titulos);
        
        //Obtención de datos de la Bdd. ++nuevo método.
        List<Examen> listaExamenes = control.traerExamenes();
        
        // Volcar la lista en la tabla de ventana. Recorremos la lista.
        if (listaExamenes!=null){
            for (Examen x : listaExamenes){
                //objeto es el nombre del objeto k bien podría llamarse examen.
                Object[] objeto = {x.getId_Examen(), x.getAnioExamen(), x.getCuatrimestreExamen(), 
                    x.getTituloCuestionario(), x.getNotaDlExamen(),
                    x.getAlumnExamen().getCursoAlumno(), x.getAlumnExamen().getEmailAlumno(), 
                    x.getAlumnExamen().getObservacionesAlumno(), 
                    x.getAlumnExamen().getPrimeraConvocatoriaAlumno()};
                modeloTabla.addRow(objeto);
            }
            
        }
        //Volcamos lo retornado en la bdd a la tabla de pantalla.
        ScrTablaExamenes.setModel(modeloTabla);
    }

           
}
